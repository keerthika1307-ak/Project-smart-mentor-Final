const mongoose = require('mongoose');
const Student = require('../models/Student');
const User = require('../models/User');
require('dotenv').config();

async function debugFeedbackIssue() {
    try {
        // Connect to database
        await mongoose.connect(process.env.MONGODB_URI);
        console.log('✅ Connected to MongoDB');

        // Find the student that should have feedback
        const student = await Student.findOne({ 'personalInfo.regNo': '22sucs17' }).populate('userId');
        
        if (!student) {
            console.log('❌ Student with regNo 22sucs17 not found');
            
            // Let's see what students exist
            const allStudents = await Student.find({}, 'personalInfo.name personalInfo.regNo aiFeedback');
            console.log('\n📋 Available students:');
            allStudents.forEach(s => {
                console.log(`- ${s.personalInfo.name} (${s.personalInfo.regNo}) - Has feedback: ${!!s.aiFeedback?.lastFeedback}`);
            });
            return;
        }

        console.log(`\n📋 Found student: ${student.personalInfo.name} (${student.personalInfo.regNo})`);
        console.log(`🆔 Student ID: ${student._id}`);
        console.log(`👤 User ID: ${student.userId._id}`);

        // Check if student has feedback
        console.log('\n📝 Feedback Status:');
        if (student.aiFeedback) {
            console.log('✅ aiFeedback field exists');
            console.log('Last Feedback:', student.aiFeedback.lastFeedback ? 'EXISTS' : 'NULL');
            console.log('Feedback Type:', student.aiFeedback.feedbackType);
            console.log('Generated By:', student.aiFeedback.generatedBy);
            console.log('Mentor Name:', student.aiFeedback.mentorName);
            console.log('Mentor Email:', student.aiFeedback.mentorEmail);
            console.log('Last Updated:', student.aiFeedback.lastUpdated);
            
            if (student.aiFeedback.lastFeedback) {
                console.log('Feedback Preview:', student.aiFeedback.lastFeedback.substring(0, 100) + '...');
            }
        } else {
            console.log('❌ No aiFeedback field found');
        }

        // Test the API endpoint that student would use
        console.log('\n🔍 Testing API endpoint simulation...');
        
        // Simulate what the GET /api/ai/feedback/:studentId endpoint would return
        const feedbackData = {
            feedback: student.aiFeedback || {
                lastFeedback: null,
                lastUpdated: null,
                feedbackType: null
            }
        };
        
        console.log('API Response would be:', JSON.stringify(feedbackData, null, 2));

    } catch (error) {
        console.error('❌ Debug failed:', error);
    } finally {
        await mongoose.disconnect();
        console.log('\n🔌 Disconnected from MongoDB');
    }
}

// Run the debug
debugFeedbackIssue();
